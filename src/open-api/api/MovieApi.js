/**
 * Preference public API
 * Preference public API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestError from '../model/BadRequestError';
import Movie from '../model/Movie';
import MovieBase from '../model/MovieBase';
import MoviesResponse from '../model/MoviesResponse';

/**
* Movie service.
* @module api/MovieApi
* @version 0.1.0
*/
export default class MovieApi {

    /**
    * Constructs a new MovieApi. 
    * @alias module:api/MovieApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the moviesCreate operation.
     * @callback module:api/MovieApi~moviesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Movie} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create movie
     * Create movie
     * @param {module:model/MovieBase} movieBase Movie to create
     * @param {module:api/MovieApi~moviesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Movie}
     */
    moviesCreate(movieBase, callback) {
      let postBody = movieBase;
      // verify the required parameter 'movieBase' is set
      if (movieBase === undefined || movieBase === null) {
        throw new Error("Missing the required parameter 'movieBase' when calling moviesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Movie;
      return this.apiClient.callApi(
        '/movies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moviesDeleteById operation.
     * @callback module:api/MovieApi~moviesDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove movie by id
     * Remove movie by id
     * @param {String} id Movie unique identifier
     * @param {module:api/MovieApi~moviesDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moviesDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling moviesDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/movies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moviesGet operation.
     * @callback module:api/MovieApi~moviesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MoviesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get movies list
     * Get movies list
     * @param {Object} opts Optional parameters
     * @param {String} [sortBy] Field to sort by
     * @param {String} [sortOrder] Value to define sort direction - 'desc' or 'asc'
     * @param {String} [search] Search value
     * @param {module:model/Strgin} [searchBy] Type of search (title or genres)
     * @param {Array.<String>} [filter] Array to filter by genres
     * @param {String} [offset] Offset in result array for pagination
     * @param {String} [limit] Limit amount of items in result array for pagination
     * @param {module:api/MovieApi~moviesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MoviesResponse}
     */
    moviesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'search': opts['search'],
        'searchBy': opts['searchBy'],
        'filter': this.apiClient.buildCollectionParam(opts['filter'], 'multi'),
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MoviesResponse;
      return this.apiClient.callApi(
        '/movies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moviesGetById operation.
     * @callback module:api/MovieApi~moviesGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Movie} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get movie by id
     * Get movie by id
     * @param {String} id Movie unique identifier
     * @param {module:api/MovieApi~moviesGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Movie}
     */
    moviesGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling moviesGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Movie;
      return this.apiClient.callApi(
        '/movies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moviesUpdateById operation.
     * @callback module:api/MovieApi~moviesUpdateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Movie} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update movie by id
     * Update movie
     * @param {module:model/Movie} movie Movie to update
     * @param {module:api/MovieApi~moviesUpdateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Movie}
     */
    moviesUpdateById(movie, callback) {
      let postBody = movie;
      // verify the required parameter 'movie' is set
      if (movie === undefined || movie === null) {
        throw new Error("Missing the required parameter 'movie' when calling moviesUpdateById");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Movie;
      return this.apiClient.callApi(
        '/movies', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
